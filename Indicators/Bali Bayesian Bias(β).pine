// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © balipour
//@version=5

// Calculate change between the current and previous values
f_change(x) =>
    c = x - nz(x[1])

// Find minimum value in the last n elements of x
f_min(x, n) =>
    min = nz(x[1]), c = 0.0
    while n > c
        if min > x[c]
            min := x[c]
        else 
            min := min
        c := c + 1
    min

// Find maximum value in the last n elements of x
f_max(x, n) =>
    max = nz(x[1]), c = 0.0
    while n > c
        if max < x[c]
            max := x[c]
        else 
            max := max
        c := c + 1
    max

// Label Panel Function
f_label(T, out, color_PnL) =>
    // Create and position labels on the chart
    label PnL_Label = na
    label.delete(PnL_Label[1])
    ay = 0.5 * (f_max(out, 200) + f_min(out, 200)) // Slightly adjust y position for better alignment
    PnL_Label := label.new(time, ay, text = T, color = color_PnL, textcolor = color.white, size = size.normal, style = label.style_label_left, xloc = xloc.bar_time, textalign = text.align_left)
    label.set_x(PnL_Label, label.get_x(PnL_Label) + math.round(f_change(time) * 3))

// Factorial function
f_factorial(n) =>
    // Compute the factorial of n
    f = 1.0
    for i = 1 to n
        f := f * i
    f

// Custom function for combinations
f_comb(n, k) =>
    // Calculate combinations (n choose k)
    if k > n or k < 0
        0
    else
        f_factorial(n) / (f_factorial(k) * f_factorial(n - k))

// Hypothesis Testing with Binomial Distribution
p_value_binomial(k, n) =>
    // Calculate the p-value for k successes in n trials with p = 0.5
    p = 0.5
    p_values = array.new<float>(0)
    for i = k to n
        array.push(p_values, f_comb(n, i) * math.pow(p, i) * math.pow(1 - p, n - i))
    p_value = array.sum(p_values)

// Integrand function for Beta distribution
f_integrand(t, a, b) =>
    // Calculate the integrand for the Beta distribution
    math.pow(t, (a - 1)) * math.pow((1 - t), (b - 1))

// Function to calculate Beta function
f_beta(a, b, num_points) =>
    // Calculate the Beta function using numerical integration
    h = 1.0 / num_points
    integral = 0.5 * f_integrand(0, a, b) + 0.5 * f_integrand(1.0, a, b)
    for i = 1 to num_points - 1
        t = i * h
        integral := integral + f_integrand(t, a, b)
    integral * h

// Function to calculate incomplete Beta function
f_incomplete_beta(x, a, b, num_points) =>
    // Calculate the incomplete Beta function using numerical integration
    h = x / num_points
    integral = 0.5 * f_integrand(0, a, b) + 0.5 * f_integrand(x, a, b)
    for i = 1 to num_points - 1
        t = i * h
        integral := integral + f_integrand(t, a, b)
    integral * h

// Function to calculate Beta CDF
f_beta_cdf(alpha, beta, x) =>
    // Calculate the CDF of the Beta distribution
    num_points = 1000
    betaf = f_beta(alpha, beta, num_points)
    betai = f_incomplete_beta(x, alpha, beta, num_points)
    cdf = betai / betaf

// Inverse Beta CDF (PPF) without using arrays
f_beta_ppf(p, a, b, s) =>
    // Estimate the inverse CDF (percent-point function) of the Beta distribution
    float step = s
    float cdf_val = 0.0
    float x = 0.0

    // Incrementally find x such that the CDF value is approximately equal to p
    while (cdf_val < p and x <= 1.0)
        cdf_val := f_beta_cdf(a, b, x)
        x := x + step
        if cdf_val >= p
            break

    x - step // Return the value of x that makes CDF closest to p

// Function to determine plot color based on value changes
f_color0(x) =>
    // Determine the color for plotting based on the value change
    c = color.white
    if x > x[1] and x > 0.5
        c := #00ff08
    else if x < x[1] and x > 0.5
        c := #007904
    else if x < x[1] and x < 0.5
        c := #ff0000
    else if x > x[1] and x < 0.5
        c := #8d0000
    else
        c := color.white
    c

indicator("💤 Bali Bayesian Bias(β)©️ [TEP™️]", shorttitle="💤 BBB(β)©️ [TEP™️]", overlay=false)

n = input.int(100, title="Lookback: ")
op3 = input.string("No", title="Show Credible Intervals? ", options=["Yes", "No"]) == "Yes"
ci_precision = input.string("Medium", title=" Precision: ", options=["High", "Medium", "Low"])
p_value_method = input.string("Binomial", title="Distribution for P-Value: ", options=["Binomial", "Beta"]) == "Binomial"
op0 = input.string("Yes", title="Show P-Value? ", options=["Yes", "No"]) == "Yes"
op1 = input.string("Yes", title="Show Info Panel? ", options=["Yes", "No"]) == "Yes"
op2 = input.string("Yes", title="Show Label? ", options=["Yes", "No"]) == "Yes"

k = 0
alpha_prior = 1.0
beta_prior = 1.0
alpha = 0.05
r = math.log(close / close[1])
for i = 0 to n - 1
    if r[i] >= 0
        k := k + 1

// Bayesian Estimation with Beta Distribution
alpha_post = alpha_prior + k
beta_post = beta_prior + (n - k)
mean_post = alpha_post / (alpha_post + beta_post)

step = ci_precision == "High" ? 0.0125 : ci_precision == "Medium" ? 0.025 : ci_precision == "Low" ? 0.05 : na
ci_low = op3 ? f_beta_ppf(0.025, alpha_post, beta_post, step) : na
ci_high = op3 ? f_beta_ppf(0.975, alpha_post, beta_post, step) : na

// p-value calculation
p_value = p_value_method ? p_value_binomial(k, n) : 1.0 - f_beta_cdf(alpha_post, beta_post, 0.5)

plot(op0 ? p_value : na, title="P-Value", color=#5a5a5a, linewidth=1)
plot(op0 ? p_value < 0.05 ? p_value : na : na, title="P-Value Below 5%", style=plot.style_circles, color=#daff52, linewidth=2)
plot(mean_post, title="Posterior Mean", color=f_color0(mean_post), linewidth=2)
hline(op0 ? alpha : na, title="Significance Level", color=color.rgb(111, 0, 255), linestyle=hline.style_dashed)

plot(ci_low, title="95% Credible Interval Low", color=#00ffd0)
plot(ci_high, title="95% Credible Interval High", color=#00ffd0)

st0 = "Rejected The Null Hypothesis." + "\nThere Is Likely Bias."
st1 = "Failed To Reject The Null Hypothesis." + "\nNo Evidence That There Is Bias."

// Display Results
var string result_text = ""
result_text := p_value < 0.05 ? st0 : st1
f_label(op2 ? result_text : na, mean_post, #000000)
hline(0.5)

var table htable = table.new(position.middle_right, 2, 2, bgcolor=color.new(color.black, 0), frame_color=#000000, frame_width=2, border_color=color.new(color.black, 100), border_width=3)
if op1 and barstate.islast 
    table.cell(htable, column=0, row=0, text="P-Value: ", text_color=color.white, bgcolor=color.new(color.black, 50), text_size=size.auto)
    table.cell(htable, column=1, row=0, text=str.tostring(math.round(p_value, 2)), text_color=color.white, bgcolor=color.rgb(0, 0, 0, 0), text_size=size.auto)
    table.cell(htable, column=0, row=1, text="Posterior Mean: ", text_color=color.white, bgcolor=color.new(color.black, 50), text_size=size.auto)
    table.cell(htable, column=1, row=1, text=str.tostring(math.round(mean_post, 2)), text_color=color.white, bgcolor=color.rgb(0, 0, 0, 0), text_size=size.auto)
