//@version=5
indicator("AR(1)-GARCH(1,1) Approximation", overlay=false)

// Input parameters
lookback = input.int(252, "Lookback Period", minval=50)
estimation_window = input.int(1000, "Estimation Window", minval=500)

// Calculate log returns
log_return = 100 * (math.log(close) - math.log(close[1]))

// AR(1) parameter estimation
estimate_ar_param(series float returns) =>
    float sum_xy = 0.0
    float sum_xx = 0.0
    float sum_y = 0.0
    float sum_x = 0.0
    float n = 0.0
    for i = 0 to estimation_window - 1
        sum_xy += returns[i] * returns[i+1]
        sum_xx += returns[i] * returns[i]
        sum_y += returns[i+1]
        sum_x += returns[i]
        n += 1
    denominator = (n * sum_xx - sum_x * sum_x)
    ar_param = denominator != 0 ? (n * sum_xy - sum_x * sum_y) / denominator : 0
    math.max(math.min(ar_param, 0.99), -0.99)  // Ensure stationarity

// GARCH parameter estimation
estimate_garch_params(series float residuals) =>
    float omega = math.max(ta.variance(residuals, estimation_window) * 0.1, 0.000001)
    float alpha = 0.1
    float beta = 0.8
    
    for _ = 1 to 10  // Simplified estimation loop
        var_t = array.new_float(estimation_window, 0.0)
        array.set(var_t, 0, math.max(ta.variance(residuals, 20), 0.000001))  // Initialize with short-term variance
        
        for i = 1 to estimation_window - 1
            array.set(var_t, i, math.max(omega + alpha * math.pow(residuals[estimation_window - i], 2) + beta * array.get(var_t, i-1), 0.000001))
        
        // Update parameters (simplified)
        sum_squared_residuals = 0.0
        sum_variance = 0.0
        for i = 0 to estimation_window - 1
            sum_squared_residuals += math.pow(residuals[i], 2)
            sum_variance += array.get(var_t, i)
        
        omega := sum_variance != 0 ? math.max((sum_squared_residuals - sum_variance) / estimation_window, 0.000001) : 0.000001
        alpha := sum_variance != 0 ? math.max(sum_squared_residuals / sum_variance / estimation_window, 0.01) : 0.1
        beta := math.min(1 - alpha - 0.01, 0.97)  // Ensure covariance stationarity
    
    [omega, alpha, beta]

// Estimate parameters
float ar_param = 0.0
float garch_omega = 0.000001
float garch_alpha = 0.1
float garch_beta = 0.8
var float garch_variance = ta.variance(log_return, lookback)

if bar_index % estimation_window == 0
    ar_param := estimate_ar_param(log_return)
    
    // Calculate AR residuals
    mean_return = ta.sma(log_return, lookback)
    ar_prediction = mean_return + ar_param * (log_return[1] - mean_return)
    ar_residual = log_return - ar_prediction
    
    [est_omega, est_alpha, est_beta] = estimate_garch_params(ar_residual)
    garch_omega := est_omega
    garch_alpha := est_alpha
    garch_beta := est_beta

ar_param := nz(ar_param[1], 0)
garch_omega := math.max(nz(garch_omega[1], 0.000001), 0.000001)
garch_alpha := math.max(nz(garch_alpha[1], 0.1), 0.01)
garch_beta := math.min(nz(garch_beta[1], 0.8), 0.97)

// AR(1)-GARCH(1,1) model implementation
mean_return = ta.sma(log_return, lookback)
ar_prediction = mean_return + ar_param * (log_return[1] - mean_return)
ar_residual = log_return - ar_prediction

// GARCH variance calculation
garch_variance := math.max(garch_omega + garch_alpha * math.pow(ar_residual[1], 2) + garch_beta * nz(garch_variance[1], ta.variance(log_return, lookback)), 0.000001)
garch_volatility = math.sqrt(garch_variance) * math.sqrt(252)  // Annualized volatility

// Plotting
plot(log_return, color=color.blue, title="Log Return")
plot(ar_prediction, color=color.red, title="AR(1) Prediction")
plot(garch_volatility, color=color.green, title="GARCH Volatility", style=plot.style_line, linewidth=2)

// Display estimated parameters and analysis
var table info = table.new(position.top_right, 5, 2, border_width=1)
table.cell(info, 0, 0, "Model Parameters", bgcolor=color.yellow, text_color=color.black)
table.cell(info, 0, 1, "AR(1) φ: " + str.tostring(ar_param), text_color=color.white)
table.cell(info, 1, 1, "GARCH ω: " + str.tostring(garch_omega), text_color=color.white)
table.cell(info, 2, 1, "GARCH α: " + str.tostring(garch_alpha), text_color=color.white)
table.cell(info, 3, 1, "GARCH β: " + str.tostring(garch_beta), text_color=color.white)
table.cell(info, 4, 1, "GARCH Volatility: " + str.tostring(garch_volatility), text_color=color.white)

// Debugging: Print values to chart
if barstate.islast
    label.new(bar_index, high, text="AR(1) φ: " + str.tostring(ar_param) + 
              "\nGARCH ω: " + str.tostring(garch_omega) +
              "\nGARCH α: " + str.tostring(garch_alpha) +
              "\nGARCH β: " + str.tostring(garch_beta) +
              "\nGARCH Volatility: " + str.tostring(garch_volatility), 
              yloc=yloc.abovebar, color=color.yellow)
